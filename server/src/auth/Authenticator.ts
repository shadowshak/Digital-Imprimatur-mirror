// Copyright (c) 2023, John K Palladino

import * as uuid from "https://deno.land/std@0.175.0/uuid/mod.ts";

export class Authenticator {
    sessions: Map<AccessToken, UserSession>;

    ///
    /// Verifies that a token is logged in,
    /// able to perform a role, and has a list
    /// of capabilities
    ///
    verify(
        access_token: AccessToken,
        role: Role,
        capabilities: CapabilityToken[])
    {
        if (!this.sessions.has(access_token)) {
            return AuthError.NotLoggedIn;
        }

        let session = this.sessions.get(access_token)!;

        // An admin should be able to do any role
        if (session.role != Role.Admin && session.role != role) {
            return AuthError.WrongRole;
        }

        // Checks if session.expiration is in the past
        if (new Date() > session.expiration) {
            this.logout(session.access_token);
            return AuthError.SessionExpired;
        }

        // Check if the user has the required capabilities
        let hasAllCapabilities = capabilities.every(
            capability => session.permissions.has(capability)
        );
        if (!hasAllCapabilities) {
            return AuthError.WrongRole;
        }
        
        return AuthError.Ok
    }

    ///
    /// Logs the user out
    ///
    logout(access_token: AccessToken) {
        // logout the user

        // remove the session from our cache
        this.sessions.delete(access_token);
    }
}

class AccessToken {
    rawToken: string;

    constructor() {
        this.rawToken = uuid.v4.generate();
    }
}

type UserId = string;

type CapabilityToken = string;

class Capabilities {
    capabilities: Set<CapabilityToken>;

    has(capability: CapabilityToken) {
        return this.capabilities.has(capability);
    }
}

enum AuthError {
    NotLoggedIn,
    WrongRole,
    SessionExpired,
    AccessDenied,

    Ok
}

enum Role {
    Admin,
    Reviewer,
    Publisher,
}

class UserSession {
    user_id: UserId;
    access_token: AccessToken;
    expiration: Date;
    permissions: Capabilities;
    role: Role;
}

// AccessToken
// An access token is a string that is used to authenticate a user.
// It is generated by the server and sent to the client.
// The client then sends the access token in the Authorization header of subsequent requests to the server.
// The server validates the access token and returns the user's information.

// UserSession
// user_id
// access_token
// expiration_date
// permissions
// roles

// Role